# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'color_ex.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QApplication, QColorDialog


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("Предварительный просмотр")
        MainWindow.setFixedSize(301, 207)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(0, 160, 301, 41))
        self.pushButton.setStyleSheet("background-color: rgb(125, 121, 114);border-color: rgb(18, 18, 18);color: rgb(228, 230, 246);font: bold 10pt \"Arial\";\n"
"")
        self.pushButton.setObjectName("pushButton")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Применить"))

class Result_manager(QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.setWindowTitle('Предварительный просмотр')
        self.color = None
        self.pushButton.setDisabled(True)
        self.anozerColor()
        self.pushButton.clicked.connect(self.ok)

    def anozerColor(self):
        color = QColorDialog.getColor()
        if color.isValid():
            self.pushButton.setDisabled(False)
            self.color = color.red(), color.green(), color.blue()
            self.setStyleSheet(f'background-color: rgb{self.color};')

    def ok(self):
        self.close()



def color_show():
    app = QApplication(sys.argv)
    app.setStyle('Fusion')
    work_class =Result_manager()
    work_class.show()
    if app.exec_():
        pass
    return work_class.color


